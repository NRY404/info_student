{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport Vue from 'vue';\nimport VueRouter from 'vue-router';\nimport HomeView from '../views/Manage.vue';\nimport request from \"@/utils/request\";\nimport * as ElementUi from \"element-ui\";\nVue.use(VueRouter); //  设置token\n//  request 拦截器\n//  可以对请求发送前 对请求做一些处理\n//  比如统一加 token，对请求参数统一加密\n\nrequest.interceptors.request.use(function (config) {\n  config.headers['Content-Type'] = 'application/json;charset=utf-8'; //从本地获取 数据\n\n  var user = localStorage.getItem(\"userIn\") ? JSON.parse(localStorage.getItem(\"userIn\")) : null;\n\n  if (user) {\n    config.headers['token'] = user.token; //设置请求头\n  }\n\n  return config;\n}, function (error) {\n  return Promise.reject(error);\n}); //  response 拦截器\n//  可以在接口响应后统一 处理结果\n\nrequest.interceptors.response.use(function (response) {\n  var res = response.data; //  如果返回的是文件\n\n  if (response.config.responseType === 'blob') {\n    return res;\n  } //  兼容 服务器返回的字符串数据\n\n\n  if (typeof res === 'string') {\n    res = res ? JSON.parse(res) : res;\n  } //  当权限验证不通过的时候，给出提示\n\n\n  if (res.code === '401') {\n    ElementUi.Message({\n      message: res.msg,\n      type: 'error'\n    });\n    router.push(\"/\");\n  }\n}, function (error) {\n  console.log('err' + error);\n  return Promise.reject(error);\n});\nvar routes = [{\n  path: '/',\n  component: function component() {\n    return import('../views/Manage.vue');\n  },\n  redirect: '/login',\n  children: [//子路由\n  {\n    path: 'home',\n    name: '首页',\n    component: function component() {\n      return import('../views/Home.vue');\n    }\n  }, {\n    path: 'UserView',\n    name: '用户管理',\n    component: function component() {\n      return import('../views/UserView.vue');\n    }\n  }]\n}, //  登录\n{\n  path: '/login',\n  name: '登录',\n  component: function component() {\n    return import('../views/Login.vue');\n  }\n}, //  注册\n{\n  path: '/register',\n  name: '注册',\n  component: function component() {\n    return import('../views/Register.vue');\n  }\n}, {\n  path: '/about',\n  name: 'about',\n  // route level code-splitting\n  // this generates a separate chunk (about.[hash].js) for this route\n  // which is lazy-loaded when the route is visited.\n  component: function component() {\n    return import(\n    /* webpackChunkName: \"about\" */\n    '../views/AboutView.vue');\n  }\n}];\nvar router = new VueRouter({\n  mode: 'history',\n  base: process.env.BASE_URL,\n  routes: routes\n});\nexport default router;","map":{"version":3,"sources":["G:/BaiduNetdiskDownload/springboot_vue/vue/src/router/index.js"],"names":["Vue","VueRouter","HomeView","request","ElementUi","use","interceptors","config","headers","user","localStorage","getItem","JSON","parse","token","error","Promise","reject","response","res","data","responseType","code","Message","message","msg","type","router","push","console","log","routes","path","component","redirect","children","name","mode","base","process","env","BASE_URL"],"mappings":"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","sourcesContent":["import Vue from 'vue'\nimport VueRouter from 'vue-router'\nimport HomeView from '../views/Manage.vue'\nimport request from \"@/utils/request\";\nimport * as ElementUi from \"element-ui\";\n\nVue.use(VueRouter);\n\n//  设置token\n//  request 拦截器\n//  可以对请求发送前 对请求做一些处理\n//  比如统一加 token，对请求参数统一加密\nrequest.interceptors.request.use(config => {\n  config.headers['Content-Type'] = 'application/json;charset=utf-8';\n  //从本地获取 数据\n  let user = localStorage.getItem(\"userIn\") ? JSON.parse(localStorage.getItem(\"userIn\")) : null;\n  if (user) {\n    config.headers['token'] = user.token; //设置请求头\n  }\n  return config\n},error => {\n  return Promise.reject(error)\n});\n\n//  response 拦截器\n//  可以在接口响应后统一 处理结果\nrequest.interceptors.response.use(\n    response => {\n        let res = response.data;\n      //  如果返回的是文件\n        if (response.config.responseType === 'blob'){\n          return res;\n        }\n      //  兼容 服务器返回的字符串数据\n        if (typeof res === 'string'){\n          res = res ? JSON.parse(res) : res\n        }\n        //  当权限验证不通过的时候，给出提示\n        if (res.code ==='401'){\n          ElementUi.Message({\n            message: res.msg,\n            type: 'error'\n          });\n          router.push(\"/\")\n        }\n},error => {\n      console.log('err' + error);\n      return Promise.reject(error)\n    });\n\n\nconst routes = [\n  {\n    path: '/',\n    component: () => import('../views/Manage.vue'),\n    redirect: '/login',\n    children: [ //子路由\n      {\n        path: 'home',\n        name: '首页',\n        component: () => import('../views/Home.vue'),\n      },\n      {\n        path: 'UserView',\n        name: '用户管理',\n        component: () => import('../views/UserView.vue'),\n      }\n\n    ]\n  },\n  //  登录\n  {\n    path: '/login',\n    name: '登录',\n    component: () => import('../views/Login.vue')\n  },\n  //  注册\n  {\n    path: '/register',\n    name: '注册',\n    component: () => import('../views/Register.vue')\n  },\n  {\n    path: '/about',\n    name: 'about',\n    // route level code-splitting\n    // this generates a separate chunk (about.[hash].js) for this route\n    // which is lazy-loaded when the route is visited.\n    component: () => import(/* webpackChunkName: \"about\" */ '../views/AboutView.vue')\n  }\n];\n\nconst router = new VueRouter({\n  mode: 'history',\n  base: process.env.BASE_URL,\n  routes\n});\n\n\n\nexport default router\n"]},"metadata":{},"sourceType":"module"}