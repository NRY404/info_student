{"ast":null,"code":"import axios from 'axios';\nconst request = axios.create({\n  baseURL: 'http://nxyi.ink:9090',\n  // 注意！！ 这里是全局统一加上了 '/api' 前缀，也就是说所有接口都会加上'/api'前缀在，页面里面写接口的时候就不要加 '/api'了，否则会出现2个'/api'，类似 '/api/api/user'这样的报错，切记！！！\n  // baseURL: '/api/login',\n  timeout: 5000\n}); // request 拦截器\n// 可以自请求发送前对请求做一些处理\n// 比如统一加token，对请求参数统一加密\n\nrequest.interceptors.request.use(config => {\n  // config.headers['Content-Type'] = 'application/json;charset=utf-8';\n  // config.headers['Content-Type'] = 'application/x-www-form-urlencoded;charset=utf-8';\n  // config.headers['token'] = user.token;  // 设置请求头\n  return config;\n}, error => {\n  return Promise.reject(error);\n}); // response 拦截器\n// 可以在接口响应后统一处理结果\n\nrequest.interceptors.response.use(response => {\n  let res = response.data; // 如果是返回的文件\n\n  if (response.config.responseType === 'blob') {\n    return res;\n  } // 兼容服务端返回的字符串数据\n\n\n  if (typeof res === 'string') {\n    res = res ? JSON.parse(res) : res;\n  }\n\n  return res;\n}, error => {\n  console.log('err' + error); // for debug\n\n  return Promise.reject(error);\n});\nexport default request;","map":{"version":3,"sources":["G:/BaiduNetdiskDownload/Info_Student/vue/src/utils/request.js"],"names":["axios","request","create","baseURL","timeout","interceptors","use","config","error","Promise","reject","response","res","data","responseType","JSON","parse","console","log"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,OAAO,GAAGD,KAAK,CAACE,MAAN,CAAa;AACzBC,EAAAA,OAAO,EAAE,sBADgB;AACS;AAClC;AACAC,EAAAA,OAAO,EAAE;AAHgB,CAAb,CAAhB,C,CAMA;AACA;AACA;;AACAH,OAAO,CAACI,YAAR,CAAqBJ,OAArB,CAA6BK,GAA7B,CAAiCC,MAAM,IAAI;AACvC;AACA;AAEA;AACA,SAAOA,MAAP;AACH,CAND,EAMGC,KAAK,IAAI;AACR,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACH,CARD,E,CAUA;AACA;;AACAP,OAAO,CAACI,YAAR,CAAqBM,QAArB,CAA8BL,GAA9B,CACIK,QAAQ,IAAI;AACR,MAAIC,GAAG,GAAGD,QAAQ,CAACE,IAAnB,CADQ,CAER;;AACA,MAAIF,QAAQ,CAACJ,MAAT,CAAgBO,YAAhB,KAAiC,MAArC,EAA6C;AACzC,WAAOF,GAAP;AACH,GALO,CAMR;;;AACA,MAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AACzBA,IAAAA,GAAG,GAAGA,GAAG,GAAGG,IAAI,CAACC,KAAL,CAAWJ,GAAX,CAAH,GAAqBA,GAA9B;AACH;;AACD,SAAOA,GAAP;AACH,CAZL,EAaIJ,KAAK,IAAI;AACLS,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAQV,KAApB,EADK,CACuB;;AAC5B,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACH,CAhBL;AAoBA,eAAeP,OAAf","sourcesContent":["import axios from 'axios'\r\n\r\nconst request = axios.create({\r\n    baseURL: 'http://nxyi.ink:9090',  // 注意！！ 这里是全局统一加上了 '/api' 前缀，也就是说所有接口都会加上'/api'前缀在，页面里面写接口的时候就不要加 '/api'了，否则会出现2个'/api'，类似 '/api/api/user'这样的报错，切记！！！\r\n    // baseURL: '/api/login',\r\n    timeout: 5000\r\n});\r\n\r\n// request 拦截器\r\n// 可以自请求发送前对请求做一些处理\r\n// 比如统一加token，对请求参数统一加密\r\nrequest.interceptors.request.use(config => {\r\n    // config.headers['Content-Type'] = 'application/json;charset=utf-8';\r\n    // config.headers['Content-Type'] = 'application/x-www-form-urlencoded;charset=utf-8';\r\n\r\n    // config.headers['token'] = user.token;  // 设置请求头\r\n    return config\r\n}, error => {\r\n    return Promise.reject(error)\r\n});\r\n\r\n// response 拦截器\r\n// 可以在接口响应后统一处理结果\r\nrequest.interceptors.response.use(\r\n    response => {\r\n        let res = response.data;\r\n        // 如果是返回的文件\r\n        if (response.config.responseType === 'blob') {\r\n            return res\r\n        }\r\n        // 兼容服务端返回的字符串数据\r\n        if (typeof res === 'string') {\r\n            res = res ? JSON.parse(res) : res\r\n        }\r\n        return res;\r\n    },\r\n    error => {\r\n        console.log('err' + error); // for debug\r\n        return Promise.reject(error)\r\n    }\r\n)\r\n\r\n\r\nexport default request"]},"metadata":{},"sourceType":"module"}